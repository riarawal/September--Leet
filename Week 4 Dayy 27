Evaluate Division


You are given equations in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating-point number). Given some queries, return the answers. If the answer does not exist, return -1.0.
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
Example 2:

Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]
Example 3:

Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]
 

Constraints:

1 <= equations.length <= 20
equations[i].length == 2
1 <= equations[i][0].length, equations[i][1].length <= 5
values.length == equations.length
0.0 < values[i] <= 20.0
1 <= queries.length <= 20
queries[i].length == 2
1 <= queries[i][0].length, queries[i][1].length <= 5
equations[i][0], equations[i][1], queries[i][0], queries[i][1] consist of lower case English letters and digits.


-------


class Solution {
  //  public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        
    //}
   
    // would be faster to use Char, but we have String
    Map<String, Map<String, Double>> connections = new HashMap<>();
    // array of results
    double[] result;
    // mark visited 
    Map<String, Boolean> visited = new HashMap<>();
    
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        // all results -1 by default
        result = new double[queries.size()];
        Arrays.fill(result, -1.0);

        int counter = 0;
        // fill all dependencies in both directions
        for (List<String> pair: equations) {
            String first = pair.get(0);
            String second = pair.get(1);
            double value = values[counter];
            if (!connections.containsKey(first)) {
                connections.put(first, new HashMap<String, Double>());
            }
            if (!connections.containsKey(second)) {
                connections.put(second, new HashMap<String, Double>());
            }
            // in given direction
            connections.get(first).put(second, value);
            // in other direction, value of edge will 1 / given
            connections.get(second).put(first, 1.0 / value);
            // setting all visites as false;
            visited.put(first, false);
            visited.put(second, false);
            counter++;
        }
        
        counter = 0;
        // iterate over all queries
        for (List<String> pair: queries) {
            String first = pair.get(0);
            String second = pair.get(1);
            // if vertex is not in list - no solution (-1.0 by default)
            if (!connections.containsKey(first) || !connections.containsKey(second)) {
                counter++;
                continue;
            }
            // else going dfs with value 1.0 for case when first == second
            dfs(first, second, counter, 1.0);
            counter++;
        }
        return result;
    }
    
    private void dfs(String first, String second, int counter, double value) {
        // not visiting twise
        if (visited.get(first)) return;
        // if route found = write value and return
        if (first == second) {
            result[counter] = value;
            return;
        }

        // if adjacent contains final point - calculate route value
        Map<String, Double> adjacent = connections.get(first);
        if (adjacent.containsKey(second)) {
            result[counter] = value * adjacent.get(second);
            return;
        }
        // in other case iterate over all adjacent vetices and mark current as visited
        visited.put(first, true);
        for (Map.Entry<String, Double> entry: adjacent.entrySet()) {
            dfs(entry.getKey(), second, counter, value * entry.getValue());
        }
        // unmark it after
        visited.put(first, false);
    }
}

