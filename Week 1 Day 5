All Elements in Two Binary Search Trees

Solution
Given two binary search trees root1 and root2.

Return a list containing all the integers from both trees sorted in ascending order.

 

Example 1:


Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]
Example 2:

Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]
Output: [-10,0,0,1,2,5,7,10]
Example 3:

Input: root1 = [], root2 = [5,1,7,0,2]
Output: [0,1,2,5,7]
Example 4:

Input: root1 = [0,-10,10], root2 = []
Output: [-10,0,10]
Example 5:


Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]
 

Constraints:

Each tree has at most 5000 nodes.
Each node's value is between [-10^5, 10^5].

-----------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void inorder(TreeNode root, List<Integer> ll)
    {
        if(root==null)return ;
        
        inorder(root.left,ll);
        ll.add(root.val);
        inorder(root.right,ll);
    }
    
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        List<Integer> l=new ArrayList<>();
        List<Integer> l1=new ArrayList<>();
        List<Integer> l2=new ArrayList<>();
        inorder(root1,l1);
        inorder(root2,l2);
       // l1=getAllElements(root1.left, root1.right);
       // l2=getAllElements(root2.left, root2.right);
        
       // List<Integer> list = new ArrayList();
        int i = 0, j = 0;
        while(i < l1.size() && j < l2.size()) {
           // if(l1.get(i) < l2.get(j)) l.add(l1.get(i++));
            l.add(l1.get(i++));
            //else l.add(l2.get(j++));
            l.add(l2.get(j++));
        }
        
        while(i < l1.size()) l.add(l1.get(i++));
        while(j < l2.size()) l.add(l2.get(j++));
        
        
        
//         while(!l1.isEmpty() && !l2.isEmpty())
//         {
//             l.add(l1.val);
//             l.add(l2.val);
//         }
//         while(!l1.isEmpty() )
//         {
//             l.add(l1.val);
//         }
//         while( !l2.isEmpty())
//         {
//             l.add(l2.val);
//         }
        
        Collections.sort(l);
        
        return l;
        
    }
}

More optimized


class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        List<Integer> list1 = new ArrayList();
        inorder(root1, list1);
        List<Integer> list2 = new ArrayList();
        inorder(root2, list2);
        return mergeList(list1, list2);
    }
    
    private void inorder(TreeNode root, List<Integer> list) {
        if(root == null) 
            return;
        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
    
    private List<Integer> mergeList(List<Integer> list1, List<Integer> list2) {
        List<Integer> list = new ArrayList();
        int i = 0, j = 0;
        while(i < list1.size() && j < list2.size()) {
            if(list1.get(i) < list2.get(j)) list.add(list1.get(i++));
            else list.add(list2.get(j++));
        }
        
        while(i < list1.size()) list.add(list1.get(i++));
        while(j < list2.size()) list.add(list2.get(j++));
        
        return list;
    }
}
