Majority Element II

Solution
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]
   Show Hint #1  
   
   -------
   
   class Solution {
    public List<Integer> majorityElement(int[] nums) {
        Arrays.sort(nums);
        //int max=0;
        HashMap<Integer,Integer> h=new HashMap<>();
        List<Integer> l=new ArrayList<>();
        for(int i=0;i<nums.length;i++)
        {
            if(h.containsKey(nums[i]))
            {
                h.put(nums[i],h.get(nums[i])+1);
            }
            else{
                h.put(nums[i],1);
            }
        }
        int max=0;
        int max1=0;
        for(Integer key: h.keySet())
        {
            if(h.get(key)>nums.length/3)
            {
                l.add(key);
            }
            
        }
        return l;
        
    }
}
